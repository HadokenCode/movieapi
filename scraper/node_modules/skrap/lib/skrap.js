// Generated by CoffeeScript 1.6.3
var $, cheerio, crawlers, fs, headers, readRecipe, request, scrapeCollection, scrapeFields, setCrawler, skrap;

request = require('superagent');

cheerio = require('cheerio');

fs = require('fs');

headers = {};

$ = null;

crawlers = [];

module.exports = skrap = function(recipePath, params, callback) {
  var header, key, pattern, recipe, url, value, _ref;
  recipe = readRecipe(recipePath);
  url = recipe.url;
  if (recipe.headers != null) {
    _ref = recipe.headers;
    for (header in _ref) {
      value = _ref[header];
      headers[header] = value;
    }
  }
  if (params != null) {
    for (key in params) {
      value = params[key];
      pattern = new RegExp("\\$\\{" + key + "\\}", 'g');
      url = url.replace(pattern, encodeURIComponent(value));
    }
  }
  return request.get(url).set(headers).end(function(error, res) {
    var collection, scrap, _i, _len, _ref1;
    if (error) {
      return callback(error);
    }
    $ = cheerio.load(res.text);
    scrap = {};
    _ref1 = recipe.collections;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      collection = _ref1[_i];
      scrap[collection.name] = scrapeCollection(collection);
    }
    return callback(scrap, crawlers);
  });
};

readRecipe = function(recipePath) {
  var data;
  data = fs.readFileSync(recipePath, "utf8");
  return data = JSON.parse(data);
};

scrapeCollection = function(collection) {
  var node, _i, _len, _ref, _results;
  _ref = eval(collection.query);
  _results = [];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    node = _ref[_i];
    _results.push(scrapeFields(collection, node));
  }
  return _results;
};

scrapeFields = function(collection, node) {
  var field, obj, query, _ref;
  obj = {};
  _ref = collection.fields;
  for (field in _ref) {
    query = _ref[field];
    try {
      switch (typeof query) {
        case 'string':
          obj[field] = eval("$(node)." + query);
          break;
        case 'object':
          if (query.url != null) {
            setCrawler(node, obj, field, query);
          }
      }
    } catch (_error) {}
  }
  return obj;
};

setCrawler = function(node, obj, field, query) {
  var getField;
  getField = function(callback) {
    var url;
    url = eval("$(node)." + query.url);
    return request.get(url).set(headers).end(function(error, res) {
      var key, value, _$, _field, _obj, _query, _ref;
      _$ = cheerio.load(res.text);
      if (query.fields != null) {
        _obj = {};
        _ref = query.fields;
        for (_field in _ref) {
          _query = _ref[_field];
          _obj[_field] = eval(_query.replace('$', '_$'));
        }
        if ((query.group != null) && !query.group) {
          for (key in _obj) {
            value = _obj[key];
            obj[key] = value;
          }
        } else {
          obj[field] = _obj;
        }
        return callback(_obj);
      } else {
        obj[field] = eval(query.query.replace('$', '_$'));
        return callback(obj[field]);
      }
    });
  };
  obj["get" + field.charAt(0).toUpperCase() + field.slice(1)] = getField;
  return crawlers.push(getField);
};
